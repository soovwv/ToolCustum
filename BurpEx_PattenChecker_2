// BurpEx_PattenChecker.java 파일.
// 대부분 기능 완성
/* 추후 업뎃 사항

1. 로그 별로 넘버링하기 
2. 검색 패턴 부분, 3열로 보여주고, 크기는 3줄까지만 보이게 - 나머지는 스크롤
3. 화면을 절반으로 나눠서 아래반쪽 좌측은 리퀘스트, 우측은 리스폰스 화면 만들기
4. 로그 좌클릭 시 아래에 /리퀘스트/리스폰스 패킷 보여주기
5. 로그 우클릭 시, URL 복사, 리피터로 보내기 기능 추가

*/

package burp;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.File;
import java.util.Properties;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.HashSet;
import java.util.Set;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.InputEvent;

public class BurpExtender implements IBurpExtender, ITab, IHttpListener {
    
    private IBurpExtenderCallbacks callbacks;
    private IExtensionHelpers helpers;
    private JPanel mainPanel;
    private List<LogEntry> logEntries = new ArrayList<>();
    private LogTableModel logTableModel;
    private JTable logTable;
    private TableRowSorter<LogTableModel> logSorter;
    
    // 패턴 관리를 위한 변수들
    private List<String> patterns = new ArrayList<>();
    private PatternTableModel patternTableModel;
    private JTable patternTable;
    private JTextField patternField;
    private static final String CONFIG_FILE = "burp_pattern_finder.properties";
    
    // 하이라이트 설정
    private Set<Integer> highlightedRows = new HashSet<>();
    private Color highlightColor = new Color(255, 255, 200); // 연한 노란색
    
    @Override
    public void registerExtenderCallbacks(IBurpExtenderCallbacks callbacks) {
        // 기본 설정
        this.callbacks = callbacks;
        this.helpers = callbacks.getHelpers();
        callbacks.setExtensionName("패턴 찾기 확장");
        
        // 저장된 패턴 불러오기
        loadPatterns();
        
        // UI 생성
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                // 메인 패널
                mainPanel = new JPanel(new BorderLayout());
                
                // 상단 패널 - 패턴 관리
                JPanel topPanel = new JPanel(new BorderLayout());
                
                // 패턴 입력 영역
                JPanel inputPanel = new JPanel(new BorderLayout());
                JPanel leftInputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
                JPanel rightInputPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
                
                leftInputPanel.add(new JLabel("검색 패턴:"));
                patternField = new JTextField(20);
                leftInputPanel.add(patternField);
                
                JButton addButton = new JButton("추가");
                addButton.addActionListener(e -> addPattern());
                leftInputPanel.add(addButton);
                
                // 불러오기 버튼은 오른쪽으로 이동
                JButton importButton = new JButton("파일에서 불러오기");
                importButton.addActionListener(e -> importPatternsFromFile());
                rightInputPanel.add(importButton);
                
                // 패턴 전체 삭제 버튼은 오른쪽으로 이동하고 빨간색으로 변경
                JButton clearAllPatternsButton = new JButton("패턴 전체 삭제");
                clearAllPatternsButton.setBackground(new Color(255, 200, 200)); // 옅은 빨간색
                clearAllPatternsButton.addActionListener(e -> clearAllPatterns());
                rightInputPanel.add(clearAllPatternsButton);
                
                inputPanel.add(leftInputPanel, BorderLayout.WEST);
                inputPanel.add(rightInputPanel, BorderLayout.EAST);
                topPanel.add(inputPanel, BorderLayout.NORTH);
                
                // 패턴 테이블
                patternTableModel = new PatternTableModel(patterns);
                patternTable = new JTable(patternTableModel);
                JScrollPane patternScrollPane = new JScrollPane(patternTable);
                patternScrollPane.setPreferredSize(new java.awt.Dimension(0, 150));
                
                // 패턴 테이블 컨텍스트 메뉴
                JPopupMenu patternPopupMenu = new JPopupMenu();
                JMenuItem deleteItem = new JMenuItem("삭제");
                deleteItem.addActionListener(e -> deleteSelectedPattern());
                JMenuItem editItem = new JMenuItem("수정");
                editItem.addActionListener(e -> editSelectedPattern());
                patternPopupMenu.add(editItem);
                patternPopupMenu.add(deleteItem);
                
                patternTable.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.isPopupTrigger()) {
                            int row = patternTable.rowAtPoint(e.getPoint());
                            if (row >= 0 && row < patternTable.getRowCount()) {
                                patternTable.setRowSelectionInterval(row, row);
                                patternPopupMenu.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    }
                    
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (e.isPopupTrigger()) {
                            int row = patternTable.rowAtPoint(e.getPoint());
                            if (row >= 0 && row < patternTable.getRowCount()) {
                                patternTable.setRowSelectionInterval(row, row);
                                patternPopupMenu.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    }
                });
                
                topPanel.add(patternScrollPane, BorderLayout.CENTER);
                
                // 로그 테이블
                logTableModel = new LogTableModel(logEntries);
                logTable = new JTable(logTableModel);
                
                // 테이블 정렬 기능 추가
                logSorter = new TableRowSorter<>(logTableModel);
                logTable.setRowSorter(logSorter);
                
                // 하이라이트 기능 적용 (클릭 기반)
                logTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, 
                            boolean isSelected, boolean hasFocus, int row, int column) {
                        Component c = super.getTableCellRendererComponent(
                                table, value, isSelected, hasFocus, row, column);
                        
                        if (!isSelected) {
                            int modelRow = logTable.convertRowIndexToModel(row);
                            if (highlightedRows.contains(modelRow)) {
                                c.setBackground(highlightColor);
                            } else {
                                c.setBackground(table.getBackground());
                            }
                        }
                        
                        return c;
                    }
                });
                
                // 로그 테이블에 단축키 및 마우스 이벤트 추가
                logTable.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyPressed(KeyEvent e) {
                        // Ctrl+1로 하이라이트 토글
                        if (e.isControlDown() && e.getKeyCode() == KeyEvent.VK_1) {
                            toggleHighlightForSelectedRows();
                        }
                    }
                });
                
                // 로그 테이블 컨텍스트 메뉴
                JPopupMenu logPopupMenu = new JPopupMenu();
                JMenuItem deleteLogItem = new JMenuItem("선택 로그 삭제");
                deleteLogItem.addActionListener(e -> deleteSelectedLogs());
                logPopupMenu.add(deleteLogItem);
                
                JMenuItem highlightItem = new JMenuItem("하이라이트");
                highlightItem.addActionListener(e -> toggleHighlightForSelectedRows());
                logPopupMenu.add(highlightItem);
                
                logTable.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.isPopupTrigger()) {
                            int row = logTable.rowAtPoint(e.getPoint());
                            if (row >= 0 && row < logTable.getRowCount()) {
                                if (!logTable.isRowSelected(row)) {
                                    logTable.setRowSelectionInterval(row, row);
                                }
                                logPopupMenu.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    }
                    
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (e.isPopupTrigger()) {
                            int row = logTable.rowAtPoint(e.getPoint());
                            if (row >= 0 && row < logTable.getRowCount()) {
                                if (!logTable.isRowSelected(row)) {
                                    logTable.setRowSelectionInterval(row, row);
                                }
                                logPopupMenu.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    }
                });
                
                JScrollPane logScrollPane = new JScrollPane(logTable);
                
                // 버튼 패널 - 왼쪽, 중앙, 오른쪽 영역으로 나누기
                JPanel buttonPanel = new JPanel(new BorderLayout());
                JPanel leftButtonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
                JPanel rightButtonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
                
                // 1. 전체 로그 삭제 버튼 - 왼쪽 정렬
                JButton clearAllLogsButton = new JButton("전체 로그 삭제");
                clearAllLogsButton.setBackground(new Color(255, 255, 200)); // 옅은 노란색
                clearAllLogsButton.addActionListener(e -> {
                    logEntries.clear();
                    highlightedRows.clear();  // 하이라이트도 초기화
                    logTableModel.fireTableDataChanged();
                });
                leftButtonPanel.add(clearAllLogsButton);
                
                // 2. 선택 로그 삭제 버튼 - 왼쪽 정렬
                JButton deleteSelectedLogsButton = new JButton("선택 로그 삭제");
                deleteSelectedLogsButton.setBackground(new Color(144, 238, 144)); // 연한 초록색
                deleteSelectedLogsButton.addActionListener(e -> deleteSelectedLogs());
                leftButtonPanel.add(deleteSelectedLogsButton);
                
                // 3. 패턴 저장 버튼 - 오른쪽 정렬
                JButton saveButton = new JButton("패턴 저장");
                saveButton.addActionListener(e -> savePatterns());
                rightButtonPanel.add(saveButton);
                
                // 패널 배치
                buttonPanel.add(leftButtonPanel, BorderLayout.WEST);
                buttonPanel.add(rightButtonPanel, BorderLayout.EAST);
                
                mainPanel.add(topPanel, BorderLayout.NORTH);
                mainPanel.add(logScrollPane, BorderLayout.CENTER);
                mainPanel.add(buttonPanel, BorderLayout.SOUTH);
                
                // 탭 등록
                callbacks.customizeUiComponent(mainPanel);
                callbacks.addSuiteTab(BurpExtender.this);
                
                // 로그에 시작 메시지
                callbacks.printOutput("패턴 찾기 확장이 시작되었습니다. 저장된 패턴 수: " + patterns.size());
            }
        });
        
        // HTTP 리스너 등록
        callbacks.registerHttpListener(this);
    }
    
    // 선택된 행의 하이라이트 토글
    private void toggleHighlightForSelectedRows() {
        int[] selectedRows = logTable.getSelectedRows();
        if (selectedRows.length > 0) {
            for (int viewRow : selectedRows) {
                int modelRow = logTable.convertRowIndexToModel(viewRow);
                if (highlightedRows.contains(modelRow)) {
                    highlightedRows.remove(modelRow);
                } else {
                    highlightedRows.add(modelRow);
                }
            }
            logTable.repaint();
            callbacks.printOutput("하이라이트 상태 변경: " + selectedRows.length + "개 행");
        }
    }
    
    // 패턴 전체 삭제 기능 추가
    private void clearAllPatterns() {
        if (!patterns.isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(
                mainPanel,
                "모든 패턴을 삭제하시겠습니까?",
                "패턴 전체 삭제",
                JOptionPane.YES_NO_OPTION);
                
            if (confirm == JOptionPane.YES_OPTION) {
                patterns.clear();
                patternTableModel.fireTableDataChanged();
                savePatterns();
                callbacks.printOutput("모든 패턴이 삭제되었습니다.");
            }
        }
    }
    
    // 선택된 로그 삭제
    private void deleteSelectedLogs() {
        int[] selectedRows = logTable.getSelectedRows();
        if (selectedRows.length > 0) {
            // 모델 인덱스로 변환 (정렬을 고려)
            int[] modelIndices = new int[selectedRows.length];
            for (int i = 0; i < selectedRows.length; i++) {
                modelIndices[i] = logTable.convertRowIndexToModel(selectedRows[i]);
            }
            
            // 인덱스를 내림차순으로 정렬 (삭제 시 인덱스 변화 방지)
            Arrays.sort(modelIndices);
            for (int i = modelIndices.length - 1; i >= 0; i--) {
                // 하이라이트된 행도 제거
                highlightedRows.remove(modelIndices[i]);
                
                // 하이라이트된 행 인덱스 조정 (삭제된 행보다 큰 인덱스는 감소)
                Set<Integer> updatedHighlights = new HashSet<>();
                for (int highlightedRow : highlightedRows) {
                    if (highlightedRow > modelIndices[i]) {
                        updatedHighlights.add(highlightedRow - 1);
                    } else {
                        updatedHighlights.add(highlightedRow);
                    }
                }
                highlightedRows = updatedHighlights;
                
                logEntries.remove(modelIndices[i]);
            }
            
            logTableModel.fireTableDataChanged();
            callbacks.printOutput("선택된 " + selectedRows.length + "개의 로그가 삭제되었습니다.");
        }
    }
    
    // 패턴 추가
    private void addPattern() {
        String pattern = patternField.getText().trim();
        if (!pattern.isEmpty() && !patterns.contains(pattern)) {
            patterns.add(pattern);
            patternTableModel.fireTableDataChanged();
            patternField.setText("");
            savePatterns();
            callbacks.printOutput("패턴 추가됨: " + pattern);
        }
    }
    
    // 텍스트 파일에서 패턴 불러오기
    private void importPatternsFromFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
        int result = fileChooser.showOpenDialog(mainPanel);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            importPatterns(selectedFile);
        }
    }
    
    private void importPatterns(File file) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            int addedCount = 0;
            Set<String> addedPatterns = new HashSet<>();
            
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty() && !patterns.contains(line)) {
                    patterns.add(line);
                    addedPatterns.add(line);
                    addedCount++;
                }
            }
            
            reader.close();
            
            if (addedCount > 0) {
                patternTableModel.fireTableDataChanged();
                savePatterns();
                callbacks.printOutput("파일에서 " + addedCount + "개의 패턴을 불러왔습니다: " + file.getName());
                
                // 추가된 패턴 로깅
                for (String pattern : addedPatterns) {
                    callbacks.printOutput("불러온 패턴: " + pattern);
                }
            } else {
                callbacks.printOutput("파일에서 새로운 패턴을 찾지 못했습니다: " + file.getName());
            }
        } catch (Exception e) {
            callbacks.printError("패턴 불러오기 중 오류 발생: " + e.getMessage());
            JOptionPane.showMessageDialog(mainPanel, 
                                         "패턴 불러오기 오류: " + e.getMessage(), 
                                         "오류", 
                                         JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // 선택된 패턴 삭제
    private void deleteSelectedPattern() {
        int selectedRow = patternTable.getSelectedRow();
        if (selectedRow >= 0 && selectedRow < patterns.size()) {
            String pattern = patterns.get(selectedRow);
            patterns.remove(selectedRow);
            patternTableModel.fireTableDataChanged();
            savePatterns();
            callbacks.printOutput("패턴 삭제됨: " + pattern);
        }
    }
    
    // 선택된 패턴 수정
    private void editSelectedPattern() {
        int selectedRow = patternTable.getSelectedRow();
        if (selectedRow >= 0 && selectedRow < patterns.size()) {
            String oldPattern = patterns.get(selectedRow);
            String newPattern = JOptionPane.showInputDialog(mainPanel, "패턴 수정:", oldPattern);
            
            if (newPattern != null && !newPattern.trim().isEmpty() && !patterns.contains(newPattern)) {
                patterns.set(selectedRow, newPattern);
                patternTableModel.fireTableDataChanged();
                savePatterns();
                callbacks.printOutput("패턴 수정됨: " + oldPattern + " -> " + newPattern);
            }
        }
    }
    
    // 패턴 저장
    private void savePatterns() {
        try {
            Properties props = new Properties();
            props.setProperty("patterns.count", String.valueOf(patterns.size()));
            
            for (int i = 0; i < patterns.size(); i++) {
                props.setProperty("pattern." + i, patterns.get(i));
            }
            
            File configDir = new File(System.getProperty("user.home"), ".burp");
            if (!configDir.exists()) {
                configDir.mkdir();
            }
            
            File configFile = new File(configDir, CONFIG_FILE);
            FileWriter writer = new FileWriter(configFile);
            props.store(writer, "Burp Pattern Finder Configuration");
            writer.close();
            
            callbacks.printOutput("패턴이 저장되었습니다: " + configFile.getAbsolutePath());
        } catch (Exception e) {
            callbacks.printError("패턴 저장 중 오류 발생: " + e.getMessage());
        }
    }
    
    // 패턴 불러오기
    private void loadPatterns() {
        try {
            File configDir = new File(System.getProperty("user.home"), ".burp");
            File configFile = new File(configDir, CONFIG_FILE);
            
            if (configFile.exists()) {
                Properties props = new Properties();
                FileReader reader = new FileReader(configFile);
                props.load(reader);
                reader.close();
                
                int count = Integer.parseInt(props.getProperty("patterns.count", "0"));
                
                patterns.clear();
                for (int i = 0; i < count; i++) {
                    String pattern = props.getProperty("pattern." + i);
                    if (pattern != null && !pattern.isEmpty()) {
                        patterns.add(pattern);
                    }
                }
                
                callbacks.printOutput("패턴을 불러왔습니다: " + configFile.getAbsolutePath());
            }
        } catch (Exception e) {
            callbacks.printError("패턴 불러오기 중 오류 발생: " + e.getMessage());
        }
    }
    
    @Override
    public String getTabCaption() {
        return "패턴 찾기";
    }
    
    @Override
    public Component getUiComponent() {
        return mainPanel;
    }
    
    @Override
    public void processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo) {
        // 응답만 처리
        if (messageIsRequest) {
            return;
        }
        
        try {
            // 응답 분석
            byte[] response = messageInfo.getResponse();
            String responseStr = new String(response);
            
            // URL 가져오기
            IRequestInfo requestInfo = helpers.analyzeRequest(messageInfo);
            String url = requestInfo.getUrl().toString();
            
            // 패턴 찾기
            for (String pattern : patterns) {
                if (responseStr.contains(pattern) || url.contains(pattern)) {
                    // 로그에 추가
                    LogEntry newEntry = new LogEntry(
                        url,
                        helpers.analyzeResponse(response).getStatusCode(),
                        "패턴 발견: " + pattern
                    );
                    
                    // 메인 스레드에서 UI 갱신
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            logEntries.add(newEntry);
                            logTableModel.fireTableDataChanged();
                        }
                    });
                    
                    // 콘솔에 출력
                    callbacks.printOutput("패턴 발견: " + pattern + " in " + url);
                    
                    // 하나의 패턴을 찾았다면 다른 패턴은 확인하지 않음
                    break;
                }
            }
        } 
        catch (Exception e) {
            callbacks.printError("오류 발생: " + e.getMessage());
        }
    }
    
    // 로그 항목 클래스
    private static class LogEntry {
        final String url;
        final int statusCode;
        final String details;
        
        LogEntry(String url, int statusCode, String details) {
            this.url = url;
            this.statusCode = statusCode;
            this.details = details;
        }
    }
    
    // 로그 테이블 모델
    private static class LogTableModel extends AbstractTableModel {
        private List<LogEntry> log;
        private String[] columnNames = {"URL", "상태 코드", "세부 정보"};
        
        LogTableModel(List<LogEntry> log) {
            this.log = log;
        }
        
        @Override
        public int getRowCount() {
            return log.size();
        }
        
        @Override
        public int getColumnCount() {
            return columnNames.length;
        }
        
        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }
        
        @Override
        public Object getValueAt(int row, int col) {
            LogEntry entry = log.get(row);
            switch (col) {
                case 0: return entry.url;
                case 1: return entry.statusCode;
                case 2: return entry.details;
                default: return "";
            }
        }
        
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex == 1) {
                return Integer.class; // 상태 코드는 숫자로 처리
            }
            return String.class;
        }
    }
    
    // 패턴 테이블 모델
    private static class PatternTableModel extends AbstractTableModel {
        private List<String> patterns;
        private String[] columnNames = {"검색 패턴"};
        
        PatternTableModel(List<String> patterns) {
            this.patterns = patterns;
        }
        
        @Override
        public int getRowCount() {
            return patterns.size();
        }
        
        @Override
        public int getColumnCount() {
            return columnNames.length;
        }
        
        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }
        
        @Override
        public Object getValueAt(int row, int col) {
            return patterns.get(row);
        }
    }
}
